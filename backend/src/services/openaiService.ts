import OpenAI from "openai";
import dotenv from "dotenv";
import { getChatHistory, saveChatMessage } from "./chatHistoryService";
import {
  getAdminChatHistory,
  saveAdminChatMessage,
  getAdminConversation,
} from "./adminChatHistoryService";
import { getPlanText, supabase } from "./supabaseService";
import {
  getDashboardStats,
  getRecentActivity,
  getPendingPlans,
  type RecentActivity,
  type PendingPlan,
} from "./dashboardService";
import { readFile } from "fs/promises";
dotenv.config();

export interface ClientContext {
  name?: string;
  age?: string;
  goal?: string;
  gender?: string;
  height?: string;
  weight?: string;
  experience?: string;
  available_days?: string;
  health_conditions?: string;
  exercise_preferences?: string;
  dietary_restrictions?: string;
  equipment?: string;
  motivation?: string;
  [key: string]: any;
}

// Estrutura de mensagem para manter hist√≥rico (para usar com Supabase ou qualquer BD)
type Message = { role: "system" | "user" | "assistant"; content: string };

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Fun√ß√£o para verificar se cliente tem problemas de sa√∫de usando IA
export async function hasHealthConditions(context: ClientContext): Promise<boolean> {
  if (!context.health_conditions) {
    return false;
  }
  
  const healthConditions = context.health_conditions.toLowerCase().trim();
  
  // Se a resposta for claramente "nenhuma condi√ß√£o", retornar false imediatamente
  const clearNoConditions = [
    "nenhuma",
    "nenhum", 
    "n√£o",
    "nao",
    "sem problemas",
    "sem condicoes",
    "sem condi√ß√µes",
    "saud√°vel",
    "saudavel",
    "normal",
    "ok",
    "tudo bem",
    "tudo ok",
    "n√£o tenho",
    "nao tenho",
    "n√£o h√°",
    "nao ha",
    "sem nada",
    "nada",
    "n/a",
    "zero",
    "0",
    ""
  ];
  
  // Verificar se √© claramente "nenhuma condi√ß√£o"
  const isClearlyNoCondition = clearNoConditions.some(indicator => {
    if (indicator === "") return healthConditions === "";
    const regex = new RegExp(`\\b${indicator}\\b`, 'i');
    return regex.test(healthConditions) || healthConditions === indicator;
  });
  
  if (isClearlyNoCondition) {
    return false;
  }
  
  // Usar IA para interpretar se h√° problemas de sa√∫de
  
  try {
    const systemPrompt = `
√âs um especialista m√©dico em an√°lise de condi√ß√µes de sa√∫de para fitness. A tua tarefa √© determinar se uma pessoa tem condi√ß√µes de sa√∫de que requerem aten√ß√£o especial antes de criar um plano de treino.

Responde APENAS com um objeto JSON no seguinte formato, sem qualquer texto adicional:
{
  "has_health_conditions": true/false,
  "reason": "breve explica√ß√£o da decis√£o em Portugu√™s de Portugal"
}

Exemplos:
- Input: "Nenhuma" ‚Üí { "has_health_conditions": false, "reason": "Nenhuma condi√ß√£o reportada" }
- Input: "Dor nas costas" ‚Üí { "has_health_conditions": true, "reason": "Problema ortop√©dico que requer precau√ß√µes" }
- Input: "Diabetes tipo 2" ‚Üí { "has_health_conditions": true, "reason": "Doen√ßa cr√≥nica que afeta o exerc√≠cio" }
- Input: "Estou bem" ‚Üí { "has_health_conditions": false, "reason": "Sem indica√ß√£o de problemas" }

Regras:
- SIM (true): Qualquer men√ß√£o a doen√ßas, les√µes, condi√ß√µes que afetem exerc√≠cio ou medica√ß√£o.
- N√ÉO (false): Respostas que indiquem aus√™ncia de problemas.
- Em d√∫vida: Escolhe true para seguran√ßa.

Responde sempre em formato JSON v√°lido.
`;

    const userPrompt = `Analisa esta resposta sobre condi√ß√µes de sa√∫de: "${healthConditions}"

Esta pessoa tem condi√ß√µes de sa√∫de que requerem aten√ß√£o especial para criar um plano de treino?`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      max_tokens: 150,
      temperature: 0,
      response_format: { type: "json_object" },
    });

    const responseContent = completion.choices[0].message?.content?.trim();
    
    let result = false;
    try {
      const jsonResponse = JSON.parse(responseContent || '{}');
      result = jsonResponse.has_health_conditions === true;
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse da resposta JSON:', parseError);
      // Fallback: se n√£o conseguir fazer parse, assumir que tem problemas
      result = true;
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao usar IA para interpretar condi√ß√µes de sa√∫de:', error);
    
    // Fallback: se a IA falhar, usar l√≥gica conservadora
    return healthConditions.length > 0; // Se escreveu algo, assumir que pode ter problemas
  }
}

export async function generateTrainingAndNutritionPlan(
  context: ClientContext
): Promise<string> {
  // NOVA REGRA: Se cliente tem problemas de sa√∫de, n√£o gerar plano por IA
  const hasHealthIssues = await hasHealthConditions(context);
  
  if (hasHealthIssues) {
    
    // Retornar mensagem especial indicando que requer revis√£o manual
    const manualReviewMessage = `‚ö†Ô∏è PLANO REQUER REVIS√ÉO MANUAL ‚ö†Ô∏è

MOTIVO: Cliente reportou condi√ß√µes de sa√∫de que requerem avalia√ß√£o profissional.

DADOS DO CLIENTE:
Nome: ${context.name}
Idade: ${context.age} anos
G√©nero: ${context.gender}
Altura: ${context.height} cm
Peso: ${context.weight} kg
Objetivo: ${context.goal}
Experi√™ncia: ${context.experience || "N√£o especificada"}
Dias dispon√≠veis: ${context.available_days || "N√£o especificados"}
‚ö†Ô∏è CONDI√á√ïES DE SA√öDE: ${context.health_conditions}
Prefer√™ncias de exerc√≠cio: ${context.exercise_preferences || "N√£o especificadas"}
Restri√ß√µes alimentares: ${context.dietary_restrictions || "Nenhuma"}
Equipamento dispon√≠vel: ${context.equipment || "N√£o especificado"}
Motiva√ß√£o: ${context.motivation || "N√£o especificada"}

üîç A√á√ÉO REQUERIDA:
- Avaliar as condi√ß√µes de sa√∫de reportadas
- Consultar profissional de sa√∫de se necess√°rio
- Criar plano personalizado considerando as limita√ß√µes m√©dicas
- Incluir avisos espec√≠ficos e precau√ß√µes apropriadas

‚ö†Ô∏è IMPORTANTE: Este plano deve ser criado manualmente por um profissional qualificado devido √†s condi√ß√µes de sa√∫de reportadas pelo cliente.`;
    
    return manualReviewMessage;
  }

  const systemPrompt = `
√âs um coach PhD em treino e nutri√ß√£o, altamente qualificado e profissional. Cria planos detalhados e personalizados de treino e dieta, adaptados √†s caracter√≠sticas e objetivos do cliente. S√™ motivacional, claro e organizado na resposta, usando sempre o Portugu√™s de Portugal. Prioriza a seguran√ßa, especialmente com condi√ß√µes de sa√∫de, e inclui avisos apropriados. Baseia as recomenda√ß√µes em evid√™ncias cient√≠ficas, inclui progress√µes semanais e dicas para rastrear progresso.
`;

  // Improved user prompt: Added more structure, required sections for progress tracking, sample meal plans with calorie estimates, and warm-up/cool-down routines.
  const userPrompt = `
Cria um plano de treino personalizado e detalhado para o seguinte perfil:

Nome: ${context.name}
Idade: ${context.age} anos
G√©nero: ${context.gender}
Altura: ${context.height} cm
Peso: ${context.weight} kg
Objetivo: ${context.goal}
Experi√™ncia: ${context.experience || "N√£o especificada"}
Dias dispon√≠veis: ${context.available_days || "N√£o especificados"}
Condi√ß√µes de sa√∫de: ${context.health_conditions || "Nenhuma"}
Prefer√™ncias de exerc√≠cio: ${context.exercise_preferences || "N√£o especificadas"}
Restri√ß√µes alimentares: ${context.dietary_restrictions || "Nenhuma"}
Equipamento dispon√≠vel: ${context.equipment || "N√£o especificado"}
Motiva√ß√£o: ${context.motivation || "N√£o especificada"}

Se alguma informa√ß√£o do perfil do cliente estiver 'N√£o especificada', faz suposi√ß√µes razo√°veis baseadas no objetivo geral (e.g., para 'ganho de massa muscular' e 'n√£o especificada' em 'experi√™ncia', assume um n√≠vel iniciante a interm√©dio, a menos que o contexto sugira o contr√°rio). No entanto, se a aus√™ncia de informa√ß√£o for cr√≠tica para a seguran√ßa ou efic√°cia do plano (e.g., 'condi√ß√µes de sa√∫de'), indica claramente que a informa√ß√£o √© necess√°ria e que o plano √© uma sugest√£o geral que requer valida√ß√£o profissional.

O plano deve incluir:

- Sugest√µes espec√≠ficas de exerc√≠cios (nome completo, instru√ß√µes breves de execu√ß√£o, varia√ß√µes/progress√µes, foco muscular, s√©ries, repeti√ß√µes ou dura√ß√£o)
- Frequ√™ncia semanal recomendada (dias e dura√ß√£o das sess√µes)
- Dicas pr√°ticas de alimenta√ß√£o e nutri√ß√£o adaptadas ao objetivo, incluindo exemplos de refei√ß√µes para diferentes momentos do dia, sugest√µes de macronutrientes e dicas de hidrata√ß√£o/suplementa√ß√£o (se aplic√°vel e com ressalvas).
- Recomenda√ß√µes de descanso e recupera√ß√£o (sono, estrat√©gias de recupera√ß√£o ativa/passiva).
- Avisos ou precau√ß√µes importantes (sempre enfatizar a consulta a um profissional de sa√∫de, declarar que o plano √© uma sugest√£o e n√£o substitui aconselhamento m√©dico/nutricional).

Segue sempre esta estrutura para criar o plano, de forma a que todos pare√ßam feitos pela mesma pessoa, com t√≠tulos claros e sem usar qualquer tipo de numera√ß√£o. √â imperativo que esta estrutura seja seguida √† risca, com os t√≠tulos exatos e sem qualquer tipo de numera√ß√£o, para manter a uniformidade e profissionalismo de todos os planos gerados:

---

Plano Personalizado de Treino e Nutri√ß√£o

Dados do Cliente  
Nome: [preencher]  
Idade: [preencher]  
G√©nero: [preencher]  
Altura: [preencher]  
Peso: [preencher]  
Objetivo: [preencher]  
Experi√™ncia: [preencher]  
Dias dispon√≠veis: [preencher]  
Condi√ß√µes de sa√∫de: [preencher]  
Prefer√™ncias de exerc√≠cio: [preencher]  
Restri√ß√µes alimentares: [preencher]  
Equipamento dispon√≠vel: [preencher]  
Motiva√ß√£o: [preencher]  

Plano de Treino  
Resumo semanal: [explica quantos dias por semana e dura√ß√£o m√©dia das sess√µes]  
Exerc√≠cios por dia:  
[Para cada dia de treino, indica os exerc√≠cios, o n√∫mero de s√©ries e repeti√ß√µes. Usa t√≠tulos de dias, por exemplo: "Dia 1", "Dia 2", etc., e descreve os exerc√≠cios logo a seguir, em lista, incluindo nome completo, instru√ß√µes breves de execu√ß√£o, varia√ß√µes/progress√µes, e foco muscular.]  
Observa√ß√µes e dicas t√©cnicas: [dicas para execu√ß√£o, progress√£o ou adapta√ß√µes]  

Plano de Nutri√ß√£o  
Recomenda√ß√µes gerais: [aconselha o cliente conforme o objetivo, com base em evid√™ncias cient√≠ficas]  
Sugest√£o de refei√ß√µes ou dicas alimentares: [d√° exemplos ou recomenda√ß√µes pr√°ticas para diferentes momentos do dia, incluindo sugest√µes de macronutrientes, hidrata√ß√£o e suplementa√ß√£o (se aplic√°vel e com ressalvas).]  
Restri√ß√µes a considerar: [se houver restri√ß√µes, alergias ou prefer√™ncias, indicar e como lidar com elas]  

Descanso e Recupera√ß√£o  
[Recomenda√ß√µes de descanso, sono e estrat√©gias para uma boa recupera√ß√£o, como alongamentos, massagens, etc.]  

Avisos Importantes e Precau√ß√µes  
[Indica alertas de sa√∫de, cuidados espec√≠ficos, ou quando deve procurar acompanhamento profissional. Sempre enfatiza a import√¢ncia de consultar um profissional de sa√∫de ou m√©dico antes de iniciar qualquer novo regime de treino ou dieta, especialmente se houver condi√ß√µes de sa√∫de preexistentes. Declara que o plano fornecido √© uma sugest√£o e n√£o substitui o aconselhamento m√©dico ou nutricional personalizado.]  

Mensagem de Motiva√ß√£o  
[Inclui uma mensagem motivacional, inspiradora e positiva para o cliente, diretamente relacionada com o seu objetivo e reconhecendo os desafios mas focando no progresso e na consist√™ncia.]
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      max_tokens: 10000,
      temperature: 0.5,
    });

    return completion.choices[0].message?.content || "Plano n√£o gerado.";
  } catch (error) {
    return "Ocorreu um erro ao gerar o plano de treino.";
  }
}

export async function detectHumanSupportRequest(
  message: string
): Promise<boolean> {
  const systemPrompt = `
√âs um assistente especializado em an√°lise de inten√ß√µes. Determina se a mensagem indica desejo de falar com um humano.

Responde APENAS com "SIM" ou "N√ÉO".

Exemplos:
- "Quero falar com uma pessoa" ‚Üí SIM
- "Estou frustrado com o bot" ‚Üí SIM
- "Qual √© o meu plano de treino?" ‚Üí N√ÉO
- "Pode me passar para suporte humano?" ‚Üí SIM

SIM se: Pedido expl√≠cito por humano, frustra√ß√£o com IA.
N√ÉO para: Perguntas normais, conversas casuais.
`;

  const userPrompt = `Mensagem a analisar: "${message}"

Esta mensagem indica que a pessoa quer falar com um humano em vez da IA?`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      max_tokens: 20,
      temperature: 0.1, // Baixa temperatura para respostas mais consistentes
    });

    const response = completion.choices[0].message?.content
      ?.trim()
      .toUpperCase();
    return response === "SIM";
  } catch (error) {
    console.error("‚ùå Erro ao detectar solicita√ß√£o de suporte humano:", error);
    // Em caso de erro, retorna false para n√£o interromper o fluxo
    return false;
  }
}

export async function askQuestionToAI(
  clientId: string,
  context: ClientContext,
  question: string
): Promise<string> {
  // Recupera hist√≥rico da conversa deste cliente
  const history = await getChatHistory(clientId);

  // Recupera o texto do plano salvo
  const planoTexto = await getPlanText(clientId);

  const systemMessage: Message = {
    role: "system",
    content:
      "√âs um coach PhD em treino e nutri√ß√£o. Responde sempre em Portugu√™s de Portugal, de forma clara, profissional e personalizada.",
  };

  const userProfile = `
Cliente:
Nome: ${context.name}
Idade: ${context.age}
G√©nero: ${context.gender}
Altura: ${context.height} cm
Peso: ${context.weight} kg
Objetivo: ${context.goal}
Experi√™ncia: ${context.experience || "N√£o especificada"}
Dias dispon√≠veis: ${context.available_days || "N√£o especificados"}
Condi√ß√µes de sa√∫de: ${context.health_conditions || "Nenhuma"}
Prefer√™ncias de exerc√≠cio: ${
    context.exercise_preferences || "N√£o especificadas"
  }
Restri√ß√µes alimentares: ${context.dietary_restrictions || "Nenhuma"}
Equipamento dispon√≠vel: ${context.equipment || "N√£o especificado"}
Motiva√ß√£o: ${context.motivation || "N√£o especificada"}
`;

  const userMessage: Message = {
    role: "user",
    content: `
${userProfile}

Plano personalizado do cliente:
${planoTexto ? planoTexto : "[Plano n√£o encontrado]"}

Pergunta: ${question}
`,
  };

  // Junta system + hist√≥rico + nova pergunta
  const messages: Message[] = [
    systemMessage,
    ...history, // hist√≥rico j√° deve estar filtrado para incluir apenas user/assistant
    userMessage,
  ];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
      max_tokens: 800,
      temperature: 0.7,
    });

    const answer =
      completion.choices[0].message?.content ||
      "N√£o foi poss√≠vel gerar uma resposta.";

    return answer;
  } catch (error) {
    return "Ocorreu um erro ao obter resposta da intelig√™ncia artificial.";
  }
}

// Admin AI Chat - Fun√ß√£o para o admin conversar com a IA sobre dados da base de dados
export async function chatWithAdminAI(
  message: string,
  conversationId: string
): Promise<string> {
  try {
    // Verificar se a conversa existe
    const conversation = await getAdminConversation(conversationId);
    if (!conversation) {
      throw new Error("Conversa n√£o encontrada");
    }

    // Recuperar hist√≥rico da conversa espec√≠fica
    const adminHistory = await getAdminChatHistory(conversationId);

    // Salvar mensagem do usu√°rio no hist√≥rico
    await saveAdminChatMessage(conversationId, {
      role: "user",
      content: message,
    });

    // Ler o schema da base de dados dinamicamente
    let dbSchema = "";
    try {
      dbSchema = await readFile(
        require.resolve("../../databaseSchema.sql"),
        "utf-8"
      );
    } catch (err) {
      dbSchema = "-- Erro ao ler databaseSchema.sql";
    }

    // Primeiro, usar IA para determinar que dados buscar e construir a query
    const queryAnalysisPrompt = `
√âs um especialista em an√°lise de dados e SQL. Analisa a pergunta do admin e determina queries necess√°rias.

ESQUEMA DA BASE DE DADOS:
${dbSchema}

Regras:
- Para telefones: Se n√£o come√ßa com 351, prefixa com 351 (ex: 912345678 ‚Üí 351912345678)
- Evita subselects; faz queries sequenciais.
- Para contagens: use "select": "count"
- Responde apenas JSON.

Exemplo JSON:
{
  "needsQuery": true,
  "queries": [
    {
      "table": "clients",
      "select": "id",
      "where": "phone = '351912345678'",
      "description": "Obter ID do cliente"
    },
    {
      "table": "plans",
      "select": "*",
      "where": "client_id = {id_obtido_na_primeira_query}",
      "description": "Obter planos do cliente"
    }
  ]
}
`;

    const queryAnalysis = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: queryAnalysisPrompt },
        { role: "user", content: `Pergunta atual: ${message}` },
      ],
      max_tokens: 1500,
      temperature: 0.5,
    });

    const queryResponse = queryAnalysis.choices[0].message?.content;
    let queryData: any = {};

    try {
      // Extrair JSON do markdown se necess√°rio
      let jsonString = queryResponse || '{"needsQuery": false, "queries": []}';
      // Se a resposta cont√©m blocos de c√≥digo markdown, extrair o JSON
      const jsonMatch = jsonString.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
      if (jsonMatch) {
        jsonString = jsonMatch[1];
      }
      queryData = JSON.parse(jsonString);
    } catch (parseError) {
      console.error("Erro ao fazer parse da resposta de an√°lise:", parseError);
      console.error("Resposta original:", queryResponse);
      queryData = { needsQuery: false, queries: [] };
    }

    // LOG: Pergunta do usu√°rio e query gerada pela IA
    console.log("[ADMIN AI CHAT]", {
      pergunta: message,
      queryGeradaPelaIA: JSON.stringify(queryData, null, 2),
    });

    let databaseResults = "";

    // Se precisar de queries, execut√°-las
    if (
      queryData.needsQuery &&
      queryData.queries &&
      queryData.queries.length > 0
    ) {
      const queryResults = [];
      let idDoClienteObtido: string | null = null;

      for (let i = 0; i < queryData.queries.length; i++) {
        const query = { ...queryData.queries[i] };

        // Substituir placeholder 'id_do_cliente' pelo valor real, se j√° foi obtido
        if (idDoClienteObtido && query.where && query.where.includes("id_do_cliente")) {
          query.where = query.where.replace(/'id_do_cliente'/g, `'${idDoClienteObtido}'`).replace(/id_do_cliente/g, idDoClienteObtido);
        }

        // Substituir placeholder '{id_obtido_na_primeira_query}' pelo valor real, se j√° foi obtido
        if (idDoClienteObtido && query.where && query.where.includes("{id_obtido_na_primeira_query}")) {
          query.where = query.where.replace(/{id_obtido_na_primeira_query}/g, idDoClienteObtido);
        }

        try {
          let supabaseQuery = supabase.from(query.table);
          let isCountQuery = false;

          // Verificar se √© uma query de contagem
          if (
            query.select &&
            (query.select.toLowerCase().includes("count") ||
              query.select === "*")
          ) {
            if (query.select.toLowerCase().includes("count")) {
              isCountQuery = true;
              supabaseQuery = supabaseQuery.select("*", {
                count: "exact",
                head: true,
              });
            } else {
              supabaseQuery = supabaseQuery.select(query.select);
            }
          } else if (query.select) {
            supabaseQuery = supabaseQuery.select(query.select);
          } else {
            supabaseQuery = supabaseQuery.select("*");
          }

          // Aplicar where conditions (parsing melhorado)
          if (query.where) {
            const whereConditions = query.where.split(" AND ");
            for (const condition of whereConditions) {
              const trimmedCondition = condition.trim();

              // Parsing para diferentes tipos de condi√ß√µes
              if (trimmedCondition.includes("=")) {
                const [field, value] = trimmedCondition
                  .split("=")
                  .map((s: string) => s.trim());
                const cleanValue = value.replace(/['"]/g, "");

                // Converter valores booleanos
                if (cleanValue.toLowerCase() === "true") {
                  supabaseQuery = supabaseQuery.eq(field, true);
                } else if (cleanValue.toLowerCase() === "false") {
                  supabaseQuery = supabaseQuery.eq(field, false);
                } else {
                  supabaseQuery = supabaseQuery.eq(field, cleanValue);
                }
              } else if (trimmedCondition.includes("!=")) {
                const [field, value] = trimmedCondition
                  .split("!=")
                  .map((s: string) => s.trim());
                const cleanValue = value.replace(/['"]/g, "");
                supabaseQuery = supabaseQuery.neq(field, cleanValue);
              } else if (trimmedCondition.includes(">=")) {
                const [field, value] = trimmedCondition
                  .split(">=")
                  .map((s: string) => s.trim());
                const cleanValue = value.replace(/['"]/g, "");
                supabaseQuery = supabaseQuery.gte(field, cleanValue);
              } else if (trimmedCondition.includes("<=")) {
                const [field, value] = trimmedCondition
                  .split("<=")
                  .map((s: string) => s.trim());
                const cleanValue = value.replace(/['"]/g, "");
                supabaseQuery = supabaseQuery.lte(field, cleanValue);
              } else if (trimmedCondition.includes(">")) {
                const [field, value] = trimmedCondition
                  .split(">")
                  .map((s: string) => s.trim());
                const cleanValue = value.replace(/['"]/g, "");
                supabaseQuery = supabaseQuery.gt(field, cleanValue);
              } else if (trimmedCondition.includes("<")) {
                const [field, value] = trimmedCondition
                  .split("<")
                  .map((s: string) => s.trim());
                const cleanValue = value.replace(/['"]/g, "");
                supabaseQuery = supabaseQuery.lt(field, cleanValue);
              }
            }
          }

          // Aplicar ordena√ß√£o
          if (query.orderBy && !isCountQuery) {
            const [field, direction] = query.orderBy.split(" ");
            supabaseQuery = supabaseQuery.order(field, {
              ascending: direction?.toLowerCase() !== "desc",
            });
          }

          // Aplicar limit (n√£o aplicar em queries de contagem)
          if (query.limit && !isCountQuery) {
            supabaseQuery = supabaseQuery.limit(query.limit);
          }

          const { data, error, count } = await supabaseQuery;

          // Se esta √© a primeira query e retorna um id de cliente, salvar para usar nas pr√≥ximas
          if (
            i === 0 &&
            query.table === "clients" &&
            query.select &&
            query.select.replace(/\s/g, "") === "id" &&
            data &&
            Array.isArray(data) &&
            data.length > 0 &&
            data[0].id
          ) {
            idDoClienteObtido = data[0].id;
          }

          if (error) {
            console.error(`Erro na query ${query.table}:`, error);
            queryResults.push({
              table: query.table,
              description: query.description,
              error: error.message,
              data: null,
            });
          } else {
            queryResults.push({
              table: query.table,
              description: query.description,
              data: isCountQuery ? null : data,
              count: isCountQuery ? count : data?.length || 0,
            });
          }
        } catch (queryError) {
          console.error(`Erro ao executar query ${query.table}:`, queryError);
          queryResults.push({
            table: query.table,
            description: query.description,
            error: "Erro ao executar query",
            data: null,
          });
        }
      }

      // Formatar resultados para o contexto da IA
      databaseResults = queryResults
        .map((result) => {
          if (result.error) {
            return `${result.description}: Erro - ${result.error}`;
          }
          return `${result.description}: ${
            result.count
          } registos encontrados\n${JSON.stringify(result.data, null, 2)}`;
        })
        .join("\n\n");
    }

    // Agora usar a IA para interpretar os resultados e responder
    const interpretationPrompt = `
√âs um assistente de IA para an√°lise de dados. Responde sempre em Portugu√™s de Portugal, de forma clara e profissional. Fornece insights, tend√™ncias e responde diretamente √† pergunta.

Estrutura da resposta:
1. Resumo dos dados
2. An√°lise e insights
3. Recomenda√ß√µes se aplic√°vel

Contexto: ${adminHistory.length > 0 ? adminHistory.map((msg) => `${msg.role}: ${msg.content}`).join("\n") : "Esta √© a primeira intera√ß√£o"}
Dados: ${databaseResults || 'Nenhum dado necess√°rio.'}
`;

    const finalResponse = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: interpretationPrompt },
        { role: "user", content: `Pergunta original: ${message}` },
      ],
      max_tokens: 1500,
      temperature: 0.7,
    });

    const aiResponse =
      finalResponse.choices[0].message?.content ||
      "N√£o foi poss√≠vel gerar uma resposta.";

    // Salvar resposta da IA no hist√≥rico (isso tamb√©m vai gerar o t√≠tulo automaticamente)
    await saveAdminChatMessage(conversationId, {
      role: "assistant",
      content: aiResponse,
    });

    return aiResponse;
  } catch (error) {
    console.error("‚ùå Erro no chat com IA admin:", error);
    const errorMessage =
      "Ocorreu um erro ao processar sua pergunta. Tente novamente ou verifique os logs para mais detalhes.";

    // Salvar mensagem de erro no hist√≥rico
    try {
      await saveAdminChatMessage(conversationId, {
        role: "assistant",
        content: errorMessage,
      });
    } catch (saveError) {
      console.error("‚ùå Erro ao salvar mensagem de erro:", saveError);
    }

    return errorMessage;
  }
}

// Gerar t√≠tulo de conversa usando IA
export async function generateConversationTitleWithAI(
  conversationHistory: { role: "user" | "assistant"; content: string }[]
): Promise<string> {
  try {
    // Se n√£o h√° hist√≥rico, retornar t√≠tulo padr√£o
    if (conversationHistory.length === 0) {
      return "Nova Conversa";
    }

    // Pegar as primeiras mensagens da conversa (m√°ximo 5 para n√£o sobrecarregar)
    const recentMessages = conversationHistory.slice(0, 5);
    
    const systemPrompt = `
√âs especialista em t√≠tulos. Cria t√≠tulos de no m√°ximo 6 palavras em Portugu√™s de Portugal, descritivos e concisos.

Exemplos:
- Pergunta sobre stats: "Estat√≠sticas de Clientes"
- Sobre planos: "An√°lise Planos Pendentes"

Responde apenas o t√≠tulo.
`;

    const userPrompt = `
Hist√≥rico da conversa:
${recentMessages.map((msg, index) => `${msg.role}: ${msg.content}`).join('\n')}

Cria um t√≠tulo curto e descritivo para esta conversa:`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      max_tokens: 100,
      temperature: 0.3, // Baixa temperatura para t√≠tulos mais consistentes
    });

    const title = completion.choices[0].message?.content?.trim() || "Nova Conversa";
    
    // Limpar o t√≠tulo de poss√≠veis aspas ou pontua√ß√£o extra
    const cleanTitle = title.replace(/^["']|["']$/g, '').replace(/[.!?]+$/, '');
    
    return cleanTitle || "Nova Conversa";
  } catch (error) {
    console.error("‚ùå Erro ao gerar t√≠tulo da conversa:", error);
    return "Nova Conversa";
  }
}
